plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies 
{
	//MVC 로 웹사이트 개발 할수 있도록 하는 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
	//thymeleaf 라이브러리
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
	
	
	//lombok
	compileOnly 'org.projectlombok:lombok'
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	
	//devtool
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	
	//JPA Library
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	
	
	// JUnit Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	
	//DB연결 Library - h2
	runtimeOnly 'com.h2database:h2'
	
	
	//DB연결 Library - MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'
	
	
	//Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	testImplementation 'org.springframework.security:spring-security-test'
	
	
	//Mark-Down Library
	implementation 'org.commonmark:commonmark:0.21.0'
	
	
	//유효성 체크 Library - form에서 빈값이나 글자수 제한
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	
	//modelmapper 라이브러리   : dto 필드의 값을 Entity 클래스에 매핑  
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.9'
	
	
	// Querydsl 추가 : spring 3.0 , jdk 17
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
	useJUnitPlatform()
}
